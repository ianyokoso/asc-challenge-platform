import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { verifyAdminUser } from '@/lib/api/admin-guard';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

/**
 * POST /api/admin/certifications/delete
 * ÌäπÏ†ï Ïù∏Ï¶ù Í∏∞Î°ùÏùÑ Î∞±ÏóÖ ÌõÑ ÏÇ≠Ï†ú
 * 
 * Request Body:
 * - certificationId?: string (UUID) - Ïù∏Ï¶ù IDÎ°ú ÏÇ≠Ï†ú
 * - userId?: string (UUID) - ÌäπÏ†ï Ïú†Ï†ÄÏùò ÌäπÏ†ï ÎÇ†Ïßú Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * - trackId?: string (UUID) - ÌäπÏ†ï Ìä∏ÎûôÏùò ÌäπÏ†ï ÎÇ†Ïßú Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * - date?: string (yyyy-MM-dd) - ÌäπÏ†ï ÎÇ†ÏßúÏùò Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * - reason?: string - ÏÇ≠Ï†ú ÏÇ¨Ïú† (ÏÑ†ÌÉù)
 * 
 * ÏòµÏÖò:
 * 1. certificationIdÎßå Ï†úÍ≥µ ‚Üí Ìï¥Îãπ IDÏùò Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * 2. userId + trackId + date Ï†úÍ≥µ ‚Üí ÌäπÏ†ï Ïú†Ï†Ä/Ìä∏Îûô/ÎÇ†ÏßúÏùò Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * 3. userId + date Ï†úÍ≥µ ‚Üí ÌäπÏ†ï Ïú†Ï†ÄÏùò ÌäπÏ†ï ÎÇ†Ïßú Î™®Îì† Ïù∏Ï¶ù ÏÇ≠Ï†ú
 * 4. trackId + date Ï†úÍ≥µ ‚Üí ÌäπÏ†ï Ìä∏ÎûôÏùò ÌäπÏ†ï ÎÇ†Ïßú Î™®Îì† Ïù∏Ï¶ù ÏÇ≠Ï†ú
 */
export async function POST(request: NextRequest) {
  try {
    console.log('[Delete API] üöÄ Request received');

    // 1. Í¥ÄÎ¶¨Ïûê Ïù∏Ï¶ù ÌôïÏù∏
    const adminEmail = await verifyAdminUser(request);
    console.log('[Delete API] ‚úÖ Admin verified:', adminEmail);

    // 2. Request body ÌååÏã±
    const body = await request.json();
    const { certificationId, userId, trackId, date, reason } = body;

    if (!certificationId && !date) {
      return NextResponse.json(
        { error: 'Either certificationId or date must be provided' },
        { status: 400 }
      );
    }

    // ÎÇ†Ïßú ÌòïÏãù Í≤ÄÏ¶ù
    if (date) {
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(date)) {
        return NextResponse.json(
          { error: 'Invalid date format. Use yyyy-MM-dd' },
          { status: 400 }
        );
      }
    }

    console.log('[Delete API] üéØ Target:', { certificationId, userId, trackId, date });

    // 3. Service RoleÎ°ú Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: { persistSession: false }
    });

    // 4. Í¥ÄÎ¶¨Ïûê user_id Í∞ÄÏ†∏Ïò§Í∏∞
    const { data: adminUser, error: adminError } = await supabase
      .from('users')
      .select('id')
      .eq('email', adminEmail)
      .single();

    if (adminError || !adminUser) {
      console.error('[Delete API] ‚ùå Admin user not found:', adminError);
      return NextResponse.json(
        { error: 'Admin user not found' },
        { status: 404 }
      );
    }

    // 5. ÏÇ≠Ï†ú ÎåÄÏÉÅ ÏøºÎ¶¨ ÎπåÎìú
    let query = supabase.from('certifications').select('*');

    if (certificationId) {
      query = query.eq('id', certificationId);
    } else {
      if (userId) query = query.eq('user_id', userId);
      if (trackId) query = query.eq('track_id', trackId);
      if (date) query = query.eq('certification_date', date);
    }

    // 6. ÏÇ≠Ï†ú ÎåÄÏÉÅ Ïù∏Ï¶ù Í∏∞Î°ù Ï°∞Ìöå
    const { data: targetCerts, error: fetchError } = await query;

    if (fetchError) {
      console.error('[Delete API] ‚ùå Error fetching certifications:', fetchError);
      return NextResponse.json(
        { error: 'Failed to fetch certifications', details: fetchError.message },
        { status: 500 }
      );
    }

    if (!targetCerts || targetCerts.length === 0) {
      console.log('[Delete API] ‚ÑπÔ∏è No certifications found');
      return NextResponse.json({
        success: true,
        message: 'No certifications found to delete',
        deletedCount: 0,
      });
    }

    console.log('[Delete API] üìä Found', targetCerts.length, 'certification(s) to delete');

    // 7. Î∞±ÏóÖ ÌÖåÏù¥Î∏îÏóê Î≥µÏÇ¨
    const backupRecords = targetCerts.map(cert => ({
      ...cert,
      backed_up_at: new Date().toISOString(),
      backed_up_by: adminUser.id,
      backup_reason: reason || 'individual_delete',
      original_deleted_at: new Date().toISOString(),
    }));

    const { error: backupError } = await supabase
      .from('certifications_backup')
      .insert(backupRecords);

    if (backupError) {
      console.error('[Delete API] ‚ùå Error backing up certifications:', backupError);
      return NextResponse.json(
        { error: 'Failed to backup certifications', details: backupError.message },
        { status: 500 }
      );
    }

    console.log('[Delete API] ‚úÖ Backup completed');

    // 8. ÏõêÎ≥∏ ÌÖåÏù¥Î∏îÏóêÏÑú ÏÇ≠Ï†ú
    let deleteQuery = supabase.from('certifications').delete();

    if (certificationId) {
      deleteQuery = deleteQuery.eq('id', certificationId);
    } else {
      if (userId) deleteQuery = deleteQuery.eq('user_id', userId);
      if (trackId) deleteQuery = deleteQuery.eq('track_id', trackId);
      if (date) deleteQuery = deleteQuery.eq('certification_date', date);
    }

    const { error: deleteError } = await deleteQuery;

    if (deleteError) {
      console.error('[Delete API] ‚ùå Error deleting certifications:', deleteError);
      return NextResponse.json(
        { error: 'Failed to delete certifications', details: deleteError.message },
        { status: 500 }
      );
    }

    console.log('[Delete API] ‚úÖ Delete completed');

    // 9. ÏÑ±Í≥µ ÏùëÎãµ
    return NextResponse.json({
      success: true,
      message: `Successfully deleted ${targetCerts.length} certification(s)`,
      deletedCount: targetCerts.length,
      deletedCertifications: targetCerts.map(c => ({
        id: c.id,
        userId: c.user_id,
        trackId: c.track_id,
        date: c.certification_date,
      })),
      backedUp: true,
    });

  } catch (error) {
    console.error('[Delete API] ‚ùå Unexpected error:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

